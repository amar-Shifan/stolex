<%-include('../partials/header.ejs', { title: "Order Details", style: null })%>

<style>

    .flow-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin: 20px 0;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 8px;
    }

    .step {
        text-align: center;
        flex: 1;
        position: relative;
    }

    .step::after {
        content: '';
        position: absolute;
        top: 50%;
        right: -15px;
        width: 30px;
        height: 2px;
        background-color: #ccc;
        z-index: 1;
    }

    .step:last-child::after {
        display: none;
    }

    .step.completed {
        color: green;
        font-weight: bold;
    }

    .step.current {
        color: orange;
        font-weight: bold;
    }

    .step.cancelled {
        color: red;
        font-weight: bold;
    }

    .custom-btn i {
        margin-right: 8px;
        color: white;
    }


</style>

<div class="container-fluid">
    <div class="row">
        <!-- Sidebar -->
        <%- include('../partials/user_sidebar.ejs') %>

        <!-- Main Content -->
        <div class="col-md-9 col-lg-10 p-4">
            <!-- Header Section -->
            <div class="bg-white rounded-3 p-4 shadow-sm mb-4">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <a href="/orders" class="text-decoration-none text-muted mb-2 d-inline-block">
                            <i class="bi bi-arrow-left"></i> Back to Orders
                        </a>
                        <h2 class="mb-0">Order #<%= order._id %></h2>
                        <p class="text-muted mb-0">Placed on <%= new Date(order.createdAt).toLocaleDateString() %></p>
                    </div>
                    <span class="badge <%= order.orderStatus === 'delivered' ? 'bg-success' : order.orderStatus === 'pending' ? 'bg-warning text-dark' : 'bg-danger' %>">
                        <%= order.orderStatus.charAt(0).toUpperCase() + order.orderStatus.slice(1) %>
                    </span>
                </div>
            </div>

             <!-- Payment Failure Highlight -->
            <% if (order.paymentStatus === 'failed') { %>
                <div class="alert alert-warning d-flex align-items-center shadow-sm mb-4" role="alert">
                    <i class="bi bi-exclamation-triangle-fill me-3 text-danger"></i>
                    <div class="flex-grow-1">
                        <h5 class="alert-heading">Payment Failed!</h5>
                        <p class="mb-0">Your payment for this order has failed. Please complete the payment to proceed with the order.</p>
                    </div>
                    <button class="repay-button btn btn-primary" data-order-id="<%=order._id %>">Repay Now</button>

                </div>
            <% } %>

            <!-- Order Status Flow -->
            <div class="flow-container mb-4">
                <% flowStatus.forEach((status, index) => { %>
                    <div class="step 
                        <%= order.orderStatus === status.toLowerCase() ? 'current' : '' %>
                        <%= flowStatus.indexOf(order.orderStatus.charAt(0).toUpperCase() + order.orderStatus.slice(1)) > index ? 'completed' : '' %>
                        <%= order.orderStatus === 'Cancelled' && status === 'Pending' ? 'cancelled' : '' %>">
                        <%= status %>
                    </div>
                <% }) %>
            </div>

            <!-- Order Items -->
            <div class="bg-white rounded-3 shadow-sm p-4 mb-4">
                <h4 class="mb-4">Order Items</h4>
                <% order.items.forEach(item => { %>
                    <div class="card mb-3 border-0 shadow-sm">
                        <div class="card-body">
                            <div class="row align-items-center">
                                <div class="col-md-2">
                                    <img src="<%= item.productId.images[0] || 'https://via.placeholder.com/100x100' %>" 
                                        class="img-fluid rounded" 
                                        style="width: 100%; height: 100%; object-fit: contain;" 
                                        alt="<%= item.productId.name %>">
                                </div>
                                <div class="col-md-4">
                                    <h5><%= item.productId.name %></h5>
                                    <p class="text-muted mb-0">Size: <%= item.size || 'N/A' %></p>
                                    <p class="text-muted mb-0">Qty: <%= item.quantity %></p>
                                </div>
                                <div class="col-md-3">
                                    <p class="fw-bold mb-0">$<%= item.price.toFixed(2) %></p>
                                </div>
                                <div class="col-md-3">
                                    <% if (order.orderStatus !== 'delivered' && order.orderStatus !== 'cancelled') { %>
                                        <!-- Cancel Button -->
                                        <form class="cancelFormClass">
                                            <input type="hidden" name="orderId" value="<%= order._id %>">
                                            <input type="hidden" name="itemId" value="<%= item._id %>">
                                            <button type="button" class="btn btn-outline-danger w-100 cancelButton">Cancel</button>
                                        </form>
                                        
                                    <% } else if (order.orderStatus === 'delivered') { %>
                                        <!-- Return Button -->
                                        <form class="returnFormClass">
                                            <input type="hidden" name="orderId" value="<%= order._id %>">
                                            <input type="hidden" name="itemId" value="<%= item._id %>">
                                            <button type="submit" class="btn btn-outline-secondary w-100 returnButton" >Return</button>
                                        </form>
                                    <% } %>
                                </div>
                            </div>

                            <!-- Modal for Return Reason -->
                            <div class="modal fade" id="returnReasonModal" tabindex="-1" aria-labelledby="returnReasonModalLabel" aria-hidden="true">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title" id="returnReasonModalLabel">Return Order</h5>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                        </div>
                                        <div class="modal-body">
                                            <form id="returnReasonForm">
                                                <input type="hidden" id="modalOrderId" name="orderId" value="">
                                                <input type="hidden" id="modalItemId" name="itemId" value="">
                                                <div class="mb-3">
                                                    <label for="returnReason" class="form-label">Reason for Return</label>
                                                    <textarea class="form-control" id="returnReason" name="reason" rows="3" required></textarea>
                                                </div>
                                                <button type="submit" class="btn btn-primary">Submit</button>
                                            </form>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="modal fade" id="cancelReasonModal" tabindex="-1" aria-labelledby="cancelReasonModalLabel" aria-hidden="true">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title" id="cancelReasonModalLabel">Cancel Order</h5>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                        </div>
                                        <div class="modal-body">
                                            <form id="cancelReasonForm">
                                                <input type="hidden" id="cancelOrderId" name="orderId" value="">
                                                <input type="hidden" id="cancelItemId" name="itemId" value="">

                                                <div class="mb-3">
                                                    <label for="cancelReason" class="form-label">Reason for Cancellation</label>
                                                    <textarea class="form-control" id="cancelReason" name="reason" rows="3" required></textarea>
                                                </div>
                                                <button type="submit" class="btn btn-primary">Submit</button>
                                            </form>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            


                        </div>
                    </div>
                <% }) %>
            </div>


            <!-- Shipping Details -->
            <div class="bg-white rounded-3 shadow-sm p-4">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h4 class="mb-0">Shipping Details</h4>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="card bg-light border-0">
                            <div class="card-body">
                                <h6 class="card-subtitle mb-3 text-muted">Delivery Address</h6>
                                <h5 class="mb-2"><%= order.shippingAddress.name %></h5>
                                <p class="mb-1"><%= order.shippingAddress.address %></p>
                                <p class="mb-1"><%= order.shippingAddress.city %>, <%= order.shippingAddress.state %>, <%= order.shippingAddress.zip %></p>
                                <p class="mb-0"><%= order.shippingAddress.country %></p>
                                <p class="mb-0">Phone: <%= order.shippingAddress.phone %></p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="card bg-light border-0">
                            <div class="card-body">
                                <h6 class="card-subtitle mb-3 text-muted">Payment Details</h6>
                                <p class="mb-2">Method: <%= order.paymentMethod %></p>
                                <p class="mb-2">Status: <span class="<%= order.paymentStatus === 'paid' ? 'text-success' : 'text-danger' %>">
                                    <%= order.paymentStatus.charAt(0).toUpperCase() + order.paymentStatus.slice(1) %>
                                </span></p>
                                <p>Total Amount: <strong>$<%= order.totalAmount.toFixed(2) %></strong></p>
                            </div>
                        </div>
                    </div>
                    <div class="d-flex justify-content-end p-5 gx-0">
                        <a href="/order/<%=order._id%>/invoice" class="btn btn-primary custom-btn " target="_blank">
                            <i class="icon-download"></i> Download Invoice
                        </a>
                    </div>
                </div>
            </div>
        </div>
        </div>
    </div>
</div>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script>
// Add event listener to all cancel buttons
document.querySelectorAll('.cancelButton').forEach((button) => {
    button.addEventListener('click', (e) => {
        e.preventDefault(); // Prevent form submission

        // Find the closest form
        const form = e.target.closest('.cancelFormClass');
        if (!form) return;

        // Extract order and item IDs from the form
        const orderId = form.querySelector('input[name="orderId"]').value;
        const itemId = form.querySelector('input[name="itemId"]').value;

        console.log(orderId)
        console.log(itemId);
        

        // Set the order ID and item ID in the modal's hidden input fields
        document.getElementById('cancelOrderId').value = orderId;
        document.getElementById('cancelItemId').value = itemId;

        // Show the cancel reason modal
        const cancelModal = new bootstrap.Modal(document.getElementById('cancelReasonModal'));
        cancelModal.show();
    });
});

// Handle the cancellation reason form submission
document.getElementById('cancelReasonForm').addEventListener('submit', async (e) => {
    e.preventDefault(); // Prevent default form submission

    // Collect form data (including the cancellation reason)
    const formData = new FormData(e.target);
    const formObject = Object.fromEntries(formData.entries());

    try {
        // Send cancellation data to the backend
        const res = await fetch('/orders/cancel', {
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formObject),
        });

        const data = await res.json();

        // Handle the response from the server
        if (data.success) {
            showNotification('success', data.message);
            setTimeout(() => {
                window.location.reload(); // Reload the page after 1.5 seconds
            }, 1500);
        } else {
            showNotification('error', data.message);
        }
    } catch (error) {
        console.error(error);
        showNotification('error', 'Something went wrong!');
    }
});



document.querySelectorAll('.returnButton').forEach((button) => {
    button.addEventListener('click', (e) => {
        e.preventDefault(); // Prevent default form submission
        
        // Find the form and extract data
        const form = e.target.closest('.returnFormClass');
        if (!form) return;

        const orderId = form.querySelector('input[name="orderId"]').value;
        const itemId = form.querySelector('input[name="itemId"]').value;

        // Set the order ID in the modal's hidden input field
        document.getElementById('modalOrderId').value = orderId;
        document.getElementById('modalItemId').value = itemId;

        // Show the modal
        const returnModal = new bootstrap.Modal(document.getElementById('returnReasonModal'));
        returnModal.show();
    });
});


document.getElementById('returnReasonForm').addEventListener('submit', async (e) => {
    e.preventDefault();

    const formData = new FormData(e.target);
    const formObject = Object.fromEntries(formData.entries());

    try {
        const res = await fetch('/orders/return', {
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formObject),
        });
        const data = await res.json();

        // Handle response
        if (data.success) {
            showNotification('success', data.message);
            setTimeout(() => {
                window.location.reload();
            }, 1500);
        } else {
            showNotification('error', data.message);
        }
    } catch (error) {
        console.error(error);
        showNotification('error', 'Something went wrong!');
    }
});

// Repay Script
document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.repay-button').forEach((button) => {
        button.addEventListener('click', async (e) => {
            const orderId = e.target.dataset.orderId;

            try {
                const response = await fetch('/repay/order', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ orderId }),
                });

                const data = await response.json();

                if (response.ok && data.success) {
                    const options = {
                        key: data.razorpayKey,
                        amount: data.totalAmount * 100, // Convert to paise
                        currency: 'INR',
                        name: 'Storex',
                        description: 'Order Repayment',
                        order_id: data.razorpayOrderId, // Razorpay order ID from backend
                        handler: async function (response) {
                            try {
                                const verifyResponse = await fetch('/payment/verify', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify(response),
                                });

                                const verifyData = await verifyResponse.json();

                                if (verifyResponse.ok && verifyData.success) {
                                    alert('Payment successful! Order updated.');
                                    location.reload();
                                } else {
                                    alert('Payment verification failed. Please try again.');
                                }
                            } catch (error) {
                                console.error('Error verifying payment:', error);
                                alert('Something went wrong. Please contact support.');
                            }
                        },
                        theme: { color: '#3399cc' },
                    };

                    const razorpay = new Razorpay(options);
                    razorpay.open();
                } else {
                    alert(data.message || 'Failed to create repay order. Please try again.');
                }
            } catch (error) {
                console.error('Error creating repay order:', error);
                alert('Something went wrong. Please contact support.');
            }
        });
    });
});



</script>

<%- include('../partials/footer.ejs') %>
